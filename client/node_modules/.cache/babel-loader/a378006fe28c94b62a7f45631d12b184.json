{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport streams from '../apis/streams';\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, DELETE_STREAM, EDIT_STREAM, FETCH_STREAM, FETCH_STREAMS } from './types';\nexport var signIn = function signIn(userId) {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport var signOut = function signOut() {\n  return {\n    type: SIGN_OUT\n  };\n}; // create a new stream\n\nexport var createStream = function createStream(formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var userId, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                userId = getState().auth.userId;\n                _context.next = 3;\n                return streams.post('/streams', _objectSpread({}, formValues, {\n                  userId: userId\n                }));\n\n              case 3:\n                response = _context.sent;\n                dispatch({\n                  type: CREATE_STREAM,\n                  payload: response.data\n                }); // some programmatic navigation to get user back \n                // to root route after creating a new stream\n\n                history.push('/');\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; // fetch a list of all streams\n\nexport var fetchStreams = function fetchStreams() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return streams.get('/streams');\n\n              case 2:\n                response = _context2.sent;\n                dispatch({\n                  type: FETCH_STREAMS,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; // fetch one particular stream\n\nexport var fetchStream = function fetchStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return streams.get(\"/streams/\".concat(id));\n\n              case 2:\n                response = _context3.sent;\n                dispatch({\n                  type: FETCH_STREAM,\n                  payload: response.data\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; // edit a particular stream\n\nexport var editStream = function editStream(id, formValues) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return streams.patch(\"/streams/\".concat(id), formValues);\n\n              case 2:\n                response = _context4.sent;\n                dispatch({\n                  type: EDIT_STREAM,\n                  payload: response.data\n                }); // some programmatic navigation to get user back \n                // to root route after creating a new stream\n\n                history.push('/');\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; // delete a particular stream\n\nexport var deleteStream = function deleteStream(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return streams.delete(\"/streams/\".concat(id));\n\n              case 2:\n                dispatch({\n                  type: DELETE_STREAM,\n                  payload: id\n                }); // some programmatic navigation to get user back \n                // to root route after creating a new stream\n\n                history.push('/');\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/matt/Desktop/react/appboilerplate/client/src/actions/index.js"],"names":["streams","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","DELETE_STREAM","EDIT_STREAM","FETCH_STREAM","FETCH_STREAMS","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","post","response","data","push","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"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","sourcesContent":["import streams from '../apis/streams';\nimport history from '../history';\nimport { \n  SIGN_IN, \n  SIGN_OUT, \n  CREATE_STREAM, \n  DELETE_STREAM, \n  EDIT_STREAM, \n  FETCH_STREAM, \n  FETCH_STREAMS \n} from './types';\n\nexport const signIn = (userId) => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\n\n// create a new stream\nexport const createStream = formValues => async (dispatch, getState) => {\n  const { userId } = getState().auth;\n  const response = await streams.post('/streams', { ...formValues, userId });\n\n  dispatch({ type: CREATE_STREAM, payload: response.data });\n  // some programmatic navigation to get user back \n  // to root route after creating a new stream\n  history.push('/')\n};\n\n\n// fetch a list of all streams\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\n}\n\n\n// fetch one particular stream\nexport const fetchStream = (id) => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n\n  dispatch({ type: FETCH_STREAM, payload: response.data });\n}\n\n\n// edit a particular stream\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.patch(`/streams/${id}`, formValues);\n\n  dispatch({ type: EDIT_STREAM, payload: response.data });\n  // some programmatic navigation to get user back \n  // to root route after creating a new stream\n  history.push('/')\n}\n\n\n// delete a particular stream\nexport const deleteStream = (id) => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n\n  dispatch({ type: DELETE_STREAM, payload: id})\n  // some programmatic navigation to get user back \n  // to root route after creating a new stream\n  history.push('/')\n}"]},"metadata":{},"sourceType":"module"}
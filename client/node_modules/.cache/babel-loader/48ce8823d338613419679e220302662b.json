{"ast":null,"code":"import _classCallCheck from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/matt/Desktop/react/appboilerplate/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matt/Desktop/react/appboilerplate/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar StreamForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamForm, _React$Component);\n\n  function StreamForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreamForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreamForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (formProps) {\n      var className = \"field \".concat(formProps.meta.error && formProps.meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, formProps.label), React.createElement(\"input\", Object.assign({}, formProps.input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      })), _this.renderError(formProps.meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(StreamForm, [{\n    key: \"renderError\",\n    value: function renderError(_ref) {\n      var error = _ref.error,\n          touched = _ref.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 8\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 9\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"submit\"));\n    }\n  }]);\n\n  return StreamForm;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'you must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'you must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate: validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/matt/Desktop/react/appboilerplate/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","renderInput","formProps","className","meta","error","touched","label","input","renderError","onSubmit","formValues","props","handleSubmit","Component","validate","errors","title","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,U;;;;;;;;;;;;;;;;;;UAWJC,W,GAAc,UAACC,SAAD,EAAe;AAC3B,UAAMC,SAAS,mBAAWD,SAAS,CAACE,IAAV,CAAeC,KAAf,IAAwBH,SAAS,CAACE,IAAV,CAAeE,OAAvC,GAAiD,OAAjD,GAA2D,EAAtE,CAAf;AACA,aACE;AAAK,QAAA,SAAS,EAAEH,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,SAAS,CAACK,KAAlB,CADF,EAEE,+CAAWL,SAAS,CAACM,KAArB;AAA4B,QAAA,YAAY,EAAC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,MAAKC,WAAL,CAAiBP,SAAS,CAACE,IAA3B,CAHH,CADF;AAOD,K;;UAEDM,Q,GAAW,UAACC,UAAD,EAAgB;AACzB,YAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACD,K;;;;;;;sCAvB+B;AAAA,UAAlBN,KAAkB,QAAlBA,KAAkB;AAAA,UAAXC,OAAW,QAAXA,OAAW;;AAC9B,UAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,eACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;;6BAiBQ;AACP,aACE;AACE,QAAA,QAAQ,EAAE,KAAKO,KAAL,CAAWC,YAAX,CAAwB,KAAKH,QAA7B,CADZ;AAEE,QAAA,SAAS,EAAC,eAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,SAAS,EAAE,KAAKT,WAFlB;AAGE,QAAA,KAAK,EAAC,aAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EASE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,aADP;AAEE,QAAA,SAAS,EAAE,KAAKA,WAFlB;AAGE,QAAA,KAAK,EAAC,mBAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAcE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF,CADF;AAkBD;;;;EA7CsBJ,KAAK,CAACiB,S;;AAgD/B,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACJ,UAAD,EAAgB;AAC/B,MAAMK,MAAM,GAAG,EAAf;;AACA,MAAI,CAACL,UAAU,CAACM,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAI,CAACN,UAAU,CAACO,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,eAAejB,SAAS,CAAC;AACvBoB,EAAAA,IAAI,EAAE,YADiB;AAEvBJ,EAAAA,QAAQ,EAARA;AAFuB,CAAD,CAAT,CAGZf,UAHY,CAAf","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      )\n    }\n  }\n\n  renderInput = (formProps) => {\n    const className= `field ${formProps.meta.error && formProps.meta.touched ? 'error' : ''}`;\n    return (\n      <div className={className}>\n        <label>{formProps.label}</label>\n        <input {...formProps.input} autoComplete=\"off\" />\n        {this.renderError(formProps.meta)}\n      </div>\n    )\n  }\n\n  onSubmit = (formValues) => {\n    this.props.onSubmit(formValues)\n  } \n\n  render() {\n    return (\n      <form \n        onSubmit={this.props.handleSubmit(this.onSubmit)} \n        className=\"ui form error\"\n      >\n        <Field \n          name=\"title\"\n          component={this.renderInput}\n          label=\"Enter Title\"\n        />\n        <Field \n          name=\"description\"\n          component={this.renderInput}\n          label=\"Enter Description\"\n        />\n        <button className=\"ui button primary\">submit</button>\n      </form>\n    )\n  }\n}\n\nconst validate = (formValues) => {\n  const errors = {};\n  if (!formValues.title) {\n    errors.title = 'you must enter a title'\n  }\n  if (!formValues.description) {\n    errors.description = 'you must enter a description'\n  }\n  return errors;\n}\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);"]},"metadata":{},"sourceType":"module"}